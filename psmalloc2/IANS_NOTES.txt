
1. mmapped memory is not associated with an arena, but we will need to
put it's metadata somewhere... that could make the lookup function a
bit ugly... since given a chunk we do not really know if it is mmapped
until we see it metadata, and to find it's metadata ....

have a bad feeling that any solution is going to involve locks ...

for example we could put all mmapped memory in the main arena.
then when we use

arena_for_chunk(ptr)

that is based on

heap_for_ptr(ptr)

we need to find out that this is not an arena in our cyclic list.
but touching that list requires the lock :-(

one possibility that we mentioned in the designfest meeting was to
retain some innocuous metadata such as this. though we then rely
(a bit) on the application not trashing memory.


2.  over the break I have two alternatives. work on the multi arena case
that is complicated by the above problems. Or work on the single arena case
which is probably simpler (i.e. dsmallocish) but not as productive. Decisions decisions.
Not my strong suit.


OK taking the route of least resistance:  doing it with one arena first...


3. Plan of attack: Working in the !USE_ARENAS case.

  [x] get av->top under control

  [x] use free and realloc to spot chunks with no metadata

  [x] handle the allocations: _int_malloc, sysmalloc, _int_calloc, _int_ realloc, _int_memalign

  [x] handle the frees (_int_free, malloc_consolidate, systrim)

  [x] handle the rest (cfree, valloc, pvalloc, icalloc, icomalloc, ialloc)

4. Mysteries we need to look into further 

   - call to hook in _int_calloc

   - do the fenceposts need metadata? suppose so.
    
 
5. Need to have some tests for the odd ball members of the malloc clan. 

6. USE_ARENAS case. We can do the twinning part of the USE_ARENAS case, independently of the
solution to the mmap problem mentioned in 1.  

  [] arena.c
  [] sysmalloc
  [x] public_malloc
  [x] public_memalign
  [x] public_calloc	
  [x] _int_free



7. Update ptmalloc so we have something to compare with. [X]

8. This will mean having a multithreaded test/replay of some sort. [X]

9. mtreply mystery... ok so even glibc plays up, so it must be either the flags or reply related.
suspect found:

static lppool_t the_pool;


on line 1386 of  lphash.c.   FIXED. [X]


10. Might want to bring "replay/lphash.[ch]" upto date with "lphash/lphash.[ch]"

11. Clean up mhook (with a mhook.h) [X], and make sure
I have not broken other things like dsmalloc.




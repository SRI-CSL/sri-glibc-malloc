# Makefile for ptmalloc, version 2
# by Wolfram Gloger 1996-1999, 2001, 2002, 2003, 2004, 2006
# iam: snip snip; trimmed and cleaned up 

LDFLAGS = -shared -fPIC -lpthread

CFLAGS = -D_GNU_SOURCE=1                          \
	-g -O0                                    \
	-Wall -Wstrict-prototypes                 \
	-DUSE_TSD_DATA_HACK -D_REENTRANT          \
	-DNDEBUG                                  \
	-fPIC                                     \
	-Isysdeps/pthread -Isysdeps/generic -I. 

#	-DNDEBUG                                  \
#	-DMALLOC_DEBUG=1                          \
# to not use Gloger's spin locks:
#	-DUSE_NO_SPINLOCKS                        \

# Flags for the test programs
T_FLAGS   = -DUSE_MALLOC=1 -DTEST=1

# Flags for the compilation of malloc.c
M_FLAGS   = -DTHREAD_STATS=1 
#-DMALLOC_DEBUG=1

METAOBJ= utils.o memcxt.o metadata.o 
MALLOCOBJ = $(METAOBJ) malloc.o malloc-stats.o

LIB_MALLOC = libmalloc.a

TESTS = stest0 stest0 stest1 stest2

%.o: %.c %.h 
	$(CC) $(CFLAGS) $(M_FLAGS) $< -c 

all: $(METAOBJ) malloc.so $(LIB_MALLOC) $(TESTS) replay mtreplay gmtreplay

libmalloc.a: $(MALLOCOBJ)
	ar cr $@ $(MALLOCOBJ)
	ranlib $@

shared: $(METAOBJ) malloc.so 

malloc.so: $(MALLOCOBJ) malloc.h
	$(CC)  $(CFLAGS) $(M_FLAGS) $(MALLOCOBJ) $(LDFLAGS) -o $@

stest0: $(MALLOCOBJ)
	$(CC) $(CFLAGS) $(T_FLAGS) stest0.c $(MALLOCOBJ)  -lpthread -o  $@

stest1: $(MALLOCOBJ)
	$(CC) $(CFLAGS) $(T_FLAGS) stest1.c $(MALLOCOBJ)  -lpthread -o  $@

stest2: $(MALLOCOBJ)
	$(CC) $(CFLAGS) $(T_FLAGS) stest2.c $(MALLOCOBJ)  -lpthread -o  $@

lphash.o: ../lphash/lphash.c
	$(CC) $(CFLAGS) -I../lphash $(T_FLAGS) ../lphash/lphash.c -c

replaylib.o:  replaylib.c
	$(CC) $(CFLAGS) -I../lphash -I../mhooks $(T_FLAGS) replaylib.c -c

replay: replay.c $(MALLOCOBJ) lphash.o replaylib.o 
	$(CC) $(CFLAGS) -I../lphash $(T_FLAGS) replay.c $(MALLOCOBJ)  lphash.o replaylib.o -lpthread  -o  $@

mtreplay: mtreplay.c $(MALLOCOBJ) lphash.o replaylib.o 
	$(CC) $(CFLAGS) -I../lphash $(T_FLAGS) mtreplay.c $(MALLOCOBJ)  lphash.o replaylib.o -lpthread  -o  $@

gmtreplay: mtreplay.c lphash.o replaylib.o 
	$(CC) $(CFLAGS) -I../lphash $(T_FLAGS) mtreplay.c lphash.o replaylib.o -lpthread  -o  $@

SMT2 = 2668e3c6 d6c91c1f da2ad2d3

testreplay: replay
	for smt in $(SMT2) ; do \
	    echo "<running $$smt >" ; \
	    ./replay ../../analysis/data/yices_smt2_$$smt.txt ; \
	    echo "</running $$smt >" ; \
	done

mtestreplay: mtreplay
	./mtreplay 2 ../../analysis/data/yices_smt2_2668e3c6.txt

INTERVAL = `seq 1 10`

mstress: mtreplay
	for number in ${INTERVAL} ; do \
	      echo "Run $$number" ; \
	      ./mtreplay 2 ../../analysis/data/yices_smt2_2668e3c6.txt ;  \
	done

#for shaman
mstress8: mtreplay
	for number in ${INTERVAL} ; do \
	      echo "Run $$number" ; \
	      ./mtreplay 8 ../../analysis/data/yices_smt2_2668e3c6.txt ;  \
	done

#for pascali
mstress16: mtreplay
	for number in ${INTERVAL} ; do \
	      echo "Run $$number" ; \
	      ./mtreplay 16 ../../analysis/data/yices_smt2_2668e3c6.txt ;  \
	done


helgrind: mtreplay
	valgrind --tool=helgrind ./mtreplay 2 ../../analysis/data/yices_smt2_2668e3c6.txt

gmtestreplay: gmtreplay
	./gmtreplay 2 ../../analysis/data/yices_smt2_2668e3c6.txt



clean:
	rm -f $(MALLOCOBJ) libmalloc.a malloc.so $(TESTS) lphash.o  replaylib.o replay mtreplay
	rm -rf *.dSYM


# dependencies
malloc.o: arena.c hooks.c
